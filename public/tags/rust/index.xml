<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Swoyam&#39;s Dev Blogs</title>
    <link>http://localhost:1313/tags/rust/</link>
    <description>Recent content in Rust on Swoyam&#39;s Dev Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Aug 2025 18:07:46 +0545</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NNUE Theory</title>
      <link>http://localhost:1313/posts/chess_engine/nnue_theory/</link>
      <pubDate>Tue, 05 Aug 2025 18:07:46 +0545</pubDate>
      <guid>http://localhost:1313/posts/chess_engine/nnue_theory/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;Okay, so NNUEs, I know they are from shogi, I know it&amp;rsquo;s used in stockfish, and I know that it&amp;rsquo;s just one single file; that&amp;rsquo;s about all that I know. NNUEs or &amp;ldquo;Efficiently Updatable Neural Network&amp;rdquo; seem nice, because my naive approach using the NNUE probe library from &lt;a href=&#34;https://github.com/dshawul/nnue-probe&#34;&gt;dshawul&lt;/a&gt;, is getting me the same evaluations as stockfish, so I&amp;rsquo;m thrilled, but I don&amp;rsquo;t quite know how it&amp;rsquo;s working and I&amp;rsquo;d like to roll out my own NNUE probe native to rust. So, bear with me while I try and figure this out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Move Generation: Magic Bitboards</title>
      <link>http://localhost:1313/posts/chess_engine/magics/</link>
      <pubDate>Sat, 19 Jul 2025 11:06:12 +0545</pubDate>
      <guid>http://localhost:1313/posts/chess_engine/magics/</guid>
      <description>&lt;h1 id=&#34;magic-bitboards&#34;&gt;Magic Bitboards&lt;/h1&gt;&#xA;&lt;p&gt;Magic Bitboards are a go-to technique in modern bitboard engines for generating moves for sliding pieces. They’re used in top-tier engines like &lt;a href=&#34;https://www.chessprogramming.org/Stockfish&#34;&gt;Stockfish&lt;/a&gt;, &lt;a href=&#34;https://www.chessprogramming.org/Crafty&#34;&gt;Crafty&lt;/a&gt;, and &lt;a href=&#34;https://www.chessprogramming.org/Arasan&#34;&gt;Arasan&lt;/a&gt;, and are widely regarded as one of the fastest ways to generate legal moves.&lt;/p&gt;&#xA;&lt;p&gt;This post aims to break down the concept of Magic Bitboards—what they are, how they work, and why they&amp;rsquo;re worth the effort. I’m still getting my feet wet with this stuff myself, so I’ll explain it in a way that hopefully clicks for anyone just diving in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Initial setup &amp; Board Representation</title>
      <link>http://localhost:1313/posts/chess_engine/initial_setup/</link>
      <pubDate>Fri, 18 Jul 2025 21:17:57 +0545</pubDate>
      <guid>http://localhost:1313/posts/chess_engine/initial_setup/</guid>
      <description>&lt;h1 id=&#34;initial-setup&#34;&gt;Initial Setup&lt;/h1&gt;&#xA;&lt;p&gt;Allrighty, so each of the different sections of this engine is going to be in their own seperate crate.&#xA;&lt;div class=&#34;my-2 p-4 border border-red-500/30 bg-red-500/10 rounded-lg text-red-200&#34;&gt;&#xA;  &lt;div class=&#34;flex items-start gap-3 pb-4&#34;&gt;&#xA;    &lt;svg class=&#34;w-5 h-5 mt-1 text-red-400&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; viewBox=&#34;0 0 24 24&#34;&gt;&#xA;      &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M12 9v2m0 4h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0z&#34;/&gt;&#xA;    &lt;/svg&gt;&#xA;    &lt;strong class=&#34;underline&#34;&gt;A Quick Disclaimer&lt;/strong&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;p&gt;&lt;strong&gt;I don&amp;rsquo;t know rust.&lt;/strong&gt; So, some of the things I be doing might not be the best practice, or even remotely a good practice&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/posts/chess_engine/introduction/</link>
      <pubDate>Fri, 18 Jul 2025 21:07:45 +0545</pubDate>
      <guid>http://localhost:1313/posts/chess_engine/introduction/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;Welcome to a new series, of me figuring out how to build a chess engine. I&amp;rsquo;m doing this because chess is something I grew up with and the idea of me building something that could consistently beat me is pretty cool. Kinda like the student becomes the master vibe.&lt;/p&gt;&#xA;&lt;p&gt;Furthermore, I need to do something for my Final Year Project too, so this serves that purpose as well. For our Final Year Project, they want us to build something that has meaning, like they don&amp;rsquo;t want us to reinvent the wheel, they want us to have some sort of a selling point. Originally, I planned to make a chess engine from scratch and throw in a &amp;ldquo;explainer&amp;rdquo; layer, that basically explains why a certain position is better than the other, kinda like &lt;a href=&#34;https://www.chess.com&#34;&gt;chess.com&amp;rsquo;s&lt;/a&gt; game review, but instead of like cookie cutter templates, I wanted it to explain like a human would.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chess Engine</title>
      <link>http://localhost:1313/posts/chess_engine/</link>
      <pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/chess_engine/</guid>
      <description>&lt;p&gt;A bunch of blog posts about building a &lt;strong&gt;chess engine&lt;/strong&gt; in Rust.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
